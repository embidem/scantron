// Code generated by MockGen. DO NOT EDIT.
// Source: remotemachine/remote_machine.go

// Package remotemachine is a generated GoMock package.
package remotemachine

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockRemoteMachine is a mock of RemoteMachine interface
type MockRemoteMachine struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteMachineMockRecorder
}

// MockRemoteMachineMockRecorder is the mock recorder for MockRemoteMachine
type MockRemoteMachineMockRecorder struct {
	mock *MockRemoteMachine
}

// NewMockRemoteMachine creates a new mock instance
func NewMockRemoteMachine(ctrl *gomock.Controller) *MockRemoteMachine {
	mock := &MockRemoteMachine{ctrl: ctrl}
	mock.recorder = &MockRemoteMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteMachine) EXPECT() *MockRemoteMachineMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockRemoteMachine) Address() string {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockRemoteMachineMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockRemoteMachine)(nil).Address))
}

// Host mocks base method
func (m *MockRemoteMachine) Host() string {
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(string)
	return ret0
}

// Host indicates an expected call of Host
func (mr *MockRemoteMachineMockRecorder) Host() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockRemoteMachine)(nil).Host))
}

// OSName mocks base method
func (m *MockRemoteMachine) OSName() string {
	ret := m.ctrl.Call(m, "OSName")
	ret0, _ := ret[0].(string)
	return ret0
}

// OSName indicates an expected call of OSName
func (mr *MockRemoteMachineMockRecorder) OSName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OSName", reflect.TypeOf((*MockRemoteMachine)(nil).OSName))
}

// Password mocks base method
func (m *MockRemoteMachine) Password() string {
	ret := m.ctrl.Call(m, "Password")
	ret0, _ := ret[0].(string)
	return ret0
}

// Password indicates an expected call of Password
func (mr *MockRemoteMachineMockRecorder) Password() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*MockRemoteMachine)(nil).Password))
}

// UploadFile mocks base method
func (m *MockRemoteMachine) UploadFile(localPath, remotePath string) error {
	ret := m.ctrl.Call(m, "UploadFile", localPath, remotePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockRemoteMachineMockRecorder) UploadFile(localPath, remotePath interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockRemoteMachine)(nil).UploadFile), localPath, remotePath)
}

// DeleteFile mocks base method
func (m *MockRemoteMachine) DeleteFile(remotePath string) error {
	ret := m.ctrl.Call(m, "DeleteFile", remotePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile
func (mr *MockRemoteMachineMockRecorder) DeleteFile(remotePath interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockRemoteMachine)(nil).DeleteFile), remotePath)
}

// RunCommand mocks base method
func (m *MockRemoteMachine) RunCommand(arg0 string) (io.Reader, error) {
	ret := m.ctrl.Call(m, "RunCommand", arg0)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommand indicates an expected call of RunCommand
func (mr *MockRemoteMachineMockRecorder) RunCommand(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockRemoteMachine)(nil).RunCommand), arg0)
}

// Close mocks base method
func (m *MockRemoteMachine) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRemoteMachineMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRemoteMachine)(nil).Close))
}
