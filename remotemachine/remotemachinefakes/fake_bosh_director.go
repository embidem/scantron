// This file was generated by counterfeiter
package remotemachinefakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	boshdir "github.com/cloudfoundry/bosh-init/director"
	"github.com/pivotal-cf/scantron/remotemachine"
)

type FakeBoshDirector struct {
	VMsStub        func() []boshdir.VMInfo
	vMsMutex       sync.RWMutex
	vMsArgsForCall []struct{}
	vMsReturns     struct {
		result1 []boshdir.VMInfo
	}
	ConnectToStub        func(lager.Logger, boshdir.VMInfo) remotemachine.RemoteMachine
	connectToMutex       sync.RWMutex
	connectToArgsForCall []struct {
		arg1 lager.Logger
		arg2 boshdir.VMInfo
	}
	connectToReturns struct {
		result1 remotemachine.RemoteMachine
	}
	CleanupStub        func() error
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct{}
	cleanupReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBoshDirector) VMs() []boshdir.VMInfo {
	fake.vMsMutex.Lock()
	fake.vMsArgsForCall = append(fake.vMsArgsForCall, struct{}{})
	fake.recordInvocation("VMs", []interface{}{})
	fake.vMsMutex.Unlock()
	if fake.VMsStub != nil {
		return fake.VMsStub()
	} else {
		return fake.vMsReturns.result1
	}
}

func (fake *FakeBoshDirector) VMsCallCount() int {
	fake.vMsMutex.RLock()
	defer fake.vMsMutex.RUnlock()
	return len(fake.vMsArgsForCall)
}

func (fake *FakeBoshDirector) VMsReturns(result1 []boshdir.VMInfo) {
	fake.VMsStub = nil
	fake.vMsReturns = struct {
		result1 []boshdir.VMInfo
	}{result1}
}

func (fake *FakeBoshDirector) ConnectTo(arg1 lager.Logger, arg2 boshdir.VMInfo) remotemachine.RemoteMachine {
	fake.connectToMutex.Lock()
	fake.connectToArgsForCall = append(fake.connectToArgsForCall, struct {
		arg1 lager.Logger
		arg2 boshdir.VMInfo
	}{arg1, arg2})
	fake.recordInvocation("ConnectTo", []interface{}{arg1, arg2})
	fake.connectToMutex.Unlock()
	if fake.ConnectToStub != nil {
		return fake.ConnectToStub(arg1, arg2)
	} else {
		return fake.connectToReturns.result1
	}
}

func (fake *FakeBoshDirector) ConnectToCallCount() int {
	fake.connectToMutex.RLock()
	defer fake.connectToMutex.RUnlock()
	return len(fake.connectToArgsForCall)
}

func (fake *FakeBoshDirector) ConnectToArgsForCall(i int) (lager.Logger, boshdir.VMInfo) {
	fake.connectToMutex.RLock()
	defer fake.connectToMutex.RUnlock()
	return fake.connectToArgsForCall[i].arg1, fake.connectToArgsForCall[i].arg2
}

func (fake *FakeBoshDirector) ConnectToReturns(result1 remotemachine.RemoteMachine) {
	fake.ConnectToStub = nil
	fake.connectToReturns = struct {
		result1 remotemachine.RemoteMachine
	}{result1}
}

func (fake *FakeBoshDirector) Cleanup() error {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct{}{})
	fake.recordInvocation("Cleanup", []interface{}{})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		return fake.CleanupStub()
	} else {
		return fake.cleanupReturns.result1
	}
}

func (fake *FakeBoshDirector) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeBoshDirector) CleanupReturns(result1 error) {
	fake.CleanupStub = nil
	fake.cleanupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBoshDirector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.vMsMutex.RLock()
	defer fake.vMsMutex.RUnlock()
	fake.connectToMutex.RLock()
	defer fake.connectToMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBoshDirector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ remotemachine.BoshDirector = new(FakeBoshDirector)
