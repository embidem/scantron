// Code generated by MockGen. DO NOT EDIT.
// Source: filesystem/file_scanner.go

// Package filesystem is a generated GoMock package.
package filesystem

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	reflect "reflect"
	time "time"
)

// MockFileMetadata is a mock of FileMetadata interface
type MockFileMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockFileMetadataMockRecorder
}

// MockFileMetadataMockRecorder is the mock recorder for MockFileMetadata
type MockFileMetadataMockRecorder struct {
	mock *MockFileMetadata
}

// NewMockFileMetadata creates a new mock instance
func NewMockFileMetadata(ctrl *gomock.Controller) *MockFileMetadata {
	mock := &MockFileMetadata{ctrl: ctrl}
	mock.recorder = &MockFileMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileMetadata) EXPECT() *MockFileMetadataMockRecorder {
	return m.recorder
}

// GetUser mocks base method
func (m *MockFileMetadata) GetUser(path string, fileInfo os.FileInfo) (string, error) {
	ret := m.ctrl.Call(m, "GetUser", path, fileInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockFileMetadataMockRecorder) GetUser(path, fileInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockFileMetadata)(nil).GetUser), path, fileInfo)
}

// GetGroup mocks base method
func (m *MockFileMetadata) GetGroup(path string, fileInfo os.FileInfo) (string, error) {
	ret := m.ctrl.Call(m, "GetGroup", path, fileInfo)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockFileMetadataMockRecorder) GetGroup(path, fileInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockFileMetadata)(nil).GetGroup), path, fileInfo)
}

// GetModifiedTime mocks base method
func (m *MockFileMetadata) GetModifiedTime(path string, fileInfo os.FileInfo) time.Time {
	ret := m.ctrl.Call(m, "GetModifiedTime", path, fileInfo)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetModifiedTime indicates an expected call of GetModifiedTime
func (mr *MockFileMetadataMockRecorder) GetModifiedTime(path, fileInfo interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModifiedTime", reflect.TypeOf((*MockFileMetadata)(nil).GetModifiedTime), path, fileInfo)
}
